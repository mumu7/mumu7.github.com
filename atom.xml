<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-17T11:03:20.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>li.wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/08/17/%E8%B7%9F%E9%98%BF%E9%93%AD%E5%AD%A6linux%E7%AC%AC%E4%B8%89%E7%89%88/"/>
    <id>http://yoursite.com/2017/08/17/跟阿铭学linux第三版/</id>
    <published>2017-08-17T11:01:38.000Z</published>
    <updated>2017-08-17T11:03:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跟阿铭学Linux-第三版"><a href="#跟阿铭学Linux-第三版" class="headerlink" title="跟阿铭学Linux 第三版"></a>跟阿铭学Linux 第三版</h1><hr>
<p>title: 跟阿铭学Linux 第三版<br>date: 2017-08-17 19:01:38</p>
<h2 id="tags-linux-阿铭-第三版"><a href="#tags-linux-阿铭-第三版" class="headerlink" title="tags:linux,阿铭,第三版"></a>tags:linux,阿铭,第三版</h2><hr>
<h5 id="使用快捷键"><a href="#使用快捷键" class="headerlink" title="使用快捷键"></a>使用快捷键</h5><p><code>ctrl+c</code>:结束当前指令，如果你输入了一大串命令，但是并不想执行，就可以按下 Ctrl+c，光标会跳到下一行，并在刚刚结束的地方 打上一个 ^C的标记<br><code>Ctrl+D</code>:退出当前终端，也可以用 exit来退出<br><code>Ctrl+Z</code>:暂停当前进程，和Ctrl+C不一样，暂停后，可以用fg指令恢复该进程<br><code>Ctrl+L</code>:清屏，clear指令也有同样的功能<br><code>Ctrl+A</code>:可以让光标移动到命令的最前面（第一个字符）<br><code>Ctrl+E</code>:将光标移动到命令最后面</p>
<h5 id="查询帮助文档"><a href="#查询帮助文档" class="headerlink" title="查询帮助文档"></a>查询帮助文档</h5><p><code>man</code>： 用于查看命令的帮助文档 例：<code>man ls</code><br><code>ls [-a/l/d]</code>：列出当前目录下的目录和文件，不包含隐藏文件</p>
<blockquote>
<p><code>-a</code>：列出当目录下的所有文件和目录，包含隐藏文件<br><code>-l</code>：列出当前目录下出隐藏文件外的所有文件和目录，包含 权限、所属主、所属组及文件创建时间<br><code>-d</code>：<br><code>ls [文件名]</code>：会列出指定目录下的文件和目录</p>
</blockquote>
<h5 id="linux下重要的系统目录"><a href="#linux下重要的系统目录" class="headerlink" title="linux下重要的系统目录"></a>linux下重要的系统目录</h5><p><code>/etc</code>：存放系统的配置文件，如果更改了该目录下得某个文件，可能导致系统无法正常启动<br><code>/bin和/usr/bin</code>：存放供除root外的普通用户使用的指令<br><code>/sbin和/usr/sbin</code>：是供root用户使用的指令<br><code>/var</code>：也是一个重要的目录，系统上运行各个程序所产生的日志都记录在该目录下(/var/log) 。mail指令的预设也放置在这里</p>
<h4 id="linux下文件目录管理"><a href="#linux下文件目录管理" class="headerlink" title="linux下文件目录管理"></a>linux下文件目录管理</h4><p><code>mkdir [-mp][目录名称]</code>：创建目录</p>
<blockquote>
<p><code>-m</code>：指定创建目录的权限（不常用）<br><code>-p</code>：级联创建目录，并且当创建一个已经存在的目录时，不会报错<br>示例：<code>mkdir -p /temp/test</code></p>
</blockquote>
<p><code>rmdir [目录名]</code>：删除目录，不可以删除文件和空目录（不常用）<br><code>rm [文件/目录]</code>：删除文件或目录</p>
<blockquote>
<p><code>-r</code>：删除目录的选项，类似rmdir，但可以删除空目录。rm -r可以删除非空目录<br><code>-i</code>会询问是否删除，y确定。<br><code>-f</code>：表示强制删除，不再询问是否删除。如果后面跟一个不存在的目录或文件，则不会报错,但是这个命令只能删除文件<br><code>-rf</code>：删除文件或目录，rm -rf 后面不能加”/“,否则会把你的系统文件全部删掉，<strong>非常危险.慎用慎用</strong></p>
</blockquote>
<p><code>which</code>：查询命令的绝对路径（不常用）<br><code>echo $PATH</code>：查看环境变量<br><code>cp [-r/i/][来源文件][目的文件]</code>：复制文件/目录</p>
<blockquote>
<p><code>-r</code>：如果要复制一个目录，必须加-r选项，否则不能复制，类似rm 命令<br><code>-i</code>：这是一个安全选项，如果遇到一个已存在的文件，会询问是否覆盖</p>
</blockquote>
<p><code>mv [选项][源文件或目录][目标文件或目录]</code>：移动文件/目录</p>
<blockquote>
<ol>
<li>当目标为目录，且目录存在：会把源文件或目录移动到该目录中</li>
<li>当目标为目录，且目录不存在：则会把源目录重命名为新的目标文件名</li>
<li>当目标为文件，且文件存在：则会询问是否覆盖</li>
<li>当目标为文件，且文件不存在： 则会把源文件重命名为新的目标文件名</li>
</ol>
</blockquote>
<h4 id="文档相关的命令"><a href="#文档相关的命令" class="headerlink" title="文档相关的命令"></a>文档相关的命令</h4><p><code>cat [选项][文件名]</code>：正序查看文件内容</p>
<blockquote>
<p><code>-n</code>：查看文件时，把行号也显示在屏幕上<br><code>-A</code>：显示所有内容，包括特殊字符</p>
</blockquote>
<p><code>tac [文件名]</code>：倒序查看文件内容<br><code>more [文件名]</code>：查看文件内容</p>
<blockquote>
<p>当文件内容太多，一屏不能全部显示时，可以用<code>more</code>命令，<br>当看完一屏之后，按空格键翻页，<code>Ctrl+D</code>向上翻页，<code>Ctrl+F</code>向下翻页</p>
</blockquote>
<p><code>less [文件名]</code>：作用和<code>more</code>一样。空格键翻页，<code>j</code>键向下移动，<code>k</code>键向上移动。<code>/[字符串]</code>可以查找，按<code>n</code>显示下一个。<br>也可以用<code>?[字符串]</code>查找，唯一不同的是：<code>/[字符串]</code>是当前向下搜索，<code>?[字符串]</code>是向上搜索</p>
<p><code>head [-n][数字][文件名]</code>：直接跟文件名，默认显示文件前10行。也可以去掉<code>-n</code>  直接加数字。<br>示例：<code>head -n 200 test.txt</code><br>      <code>head -200 test.txt</code><br><code>tail [-n][数字][文件名]</code>：和<code>head</code>命令类似，默认显示文件最后十行，如果加上<code>-n</code>选项，则会显示最后几行<br><code>tail -f [文件名]</code>：动态显示文件最后十行，可以滚动</p>
<a id="more"></a>
<h4 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h4><p><code>chgrp [组名][文件名或文件夹]</code> ：更改文件或文件夹所属组，只能更改目录或文件本身<br><code>chgrp -R [组名][文件夹名]</code>：级联更改文件夹所属组（区分大小写）</p>
<blockquote>
<p>这里的-R选项只作用于目录，作用是级联更改，即不仅更改当前目录，连目录里的目录或者文件全部更改</p>
</blockquote>
<p><code>chgrp</code> 命令<strong>不常用</strong>，可以用<code>chown</code>代替</p>
<p><code>chown [-R][账户名/账户名:组名][文件名]</code>：更改文件所有者</p>
<blockquote>
<p><code>-R</code>：级联修改</p>
</blockquote>
<p><code>chmod [xyz][文件名]</code>：（这里的xyz表示数字）赋值权限</p>
<blockquote>
<p><code>Linux</code>用数字代替<code>rwx</code>，具体规则为：<code>r=4,w=2,x=1</code><br>默认一个目录的权限为 755，而一个文件的默认权限为644<br><code>r</code> 代表可读<br><code>w</code>代表可写<br><code>x</code>代表可执行<br>赋值权限的顺序为 <code>1.user 2.group 3.others</code>,我们可以用<code>u,g,o</code>来代表他们的属性. a 则代表 all 亦即全部<br>用法示例：<code>chomd u=rwx,og=r javaMain.java</code><br>减少权限：<code>chomd u-x javaMain.java</code>  去掉取消user的执行权限</p>
</blockquote>
<h4 id="修改文件的特殊属性"><a href="#修改文件的特殊属性" class="headerlink" title="修改文件的特殊属性"></a>修改文件的特殊属性</h4><p><code>chattr[+-=][Asaci][文件名/目录]</code>：修改文件特殊属性，<br>其中<code>+-=</code>分别表示增加、减少和设定</p>
<blockquote>
<p><code>A</code>：增加该属性后，表示文件或目录的atime将不可修改<br><code>s</code>：增加该属性后，会将数据同步写入磁盘中<br><code>a</code>：增加该属性后，表示只能追加不能删除，非root用户不能设定该属性<br><code>c</code>：增加该属性后，表示自动压缩该文件，读取时会自动解压<br><code>i</code>：增加该属性后，表示文件不能<strong>删除、重命名、设定链接、写入及新增数据</strong><br>以上选项中，常用的为<code>a</code>和<code>i</code></p>
</blockquote>
<p><img src="http://oursdj9xa.bkt.clouddn.com/757FCE82-4A1B-44EB-979B-AFA19A03EAB8.png" alt="i权限"><br>上例中：给tempData增加<code>i</code>权限后，即使是root用户，也无法在tempData中创建文件</p>
<p><img src="http://oursdj9xa.bkt.clouddn.com/D1E1605F-16D2-4C79-96B0-0AD955D7566B.png" alt="a权限"><br>上例中：给temp增加<code>a</code>权限后，只可以在里面创建文件，而不能删除文件<br>文件也一样，当增加<code>a</code>权限后不能写入内容，只能查看；增加<code>i</code>权限后，不能写入和删除</p>
<p><code>lsattr[-aR][文件/目录名]</code>：读取文件或目录的特殊权限</p>
<blockquote>
<p><code>-a</code>：类似于<code>ls -a</code>选项，连同隐藏文件一同列出<br><code>-R</code>：连同字母的数据一同列出</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;跟阿铭学Linux-第三版&quot;&gt;&lt;a href=&quot;#跟阿铭学Linux-第三版&quot; class=&quot;headerlink&quot; title=&quot;跟阿铭学Linux 第三版&quot;&gt;&lt;/a&gt;跟阿铭学Linux 第三版&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;title: 跟阿铭学Linux 第三版&lt;br&gt;date: 2017-08-17 19:01:38&lt;/p&gt;
&lt;h2 id=&quot;tags-linux-阿铭-第三版&quot;&gt;&lt;a href=&quot;#tags-linux-阿铭-第三版&quot; class=&quot;headerlink&quot; title=&quot;tags:linux,阿铭,第三版&quot;&gt;&lt;/a&gt;tags:linux,阿铭,第三版&lt;/h2&gt;&lt;hr&gt;
&lt;h5 id=&quot;使用快捷键&quot;&gt;&lt;a href=&quot;#使用快捷键&quot; class=&quot;headerlink&quot; title=&quot;使用快捷键&quot;&gt;&lt;/a&gt;使用快捷键&lt;/h5&gt;&lt;p&gt;&lt;code&gt;ctrl+c&lt;/code&gt;:结束当前指令，如果你输入了一大串命令，但是并不想执行，就可以按下 Ctrl+c，光标会跳到下一行，并在刚刚结束的地方 打上一个 ^C的标记&lt;br&gt;&lt;code&gt;Ctrl+D&lt;/code&gt;:退出当前终端，也可以用 exit来退出&lt;br&gt;&lt;code&gt;Ctrl+Z&lt;/code&gt;:暂停当前进程，和Ctrl+C不一样，暂停后，可以用fg指令恢复该进程&lt;br&gt;&lt;code&gt;Ctrl+L&lt;/code&gt;:清屏，clear指令也有同样的功能&lt;br&gt;&lt;code&gt;Ctrl+A&lt;/code&gt;:可以让光标移动到命令的最前面（第一个字符）&lt;br&gt;&lt;code&gt;Ctrl+E&lt;/code&gt;:将光标移动到命令最后面&lt;/p&gt;
&lt;h5 id=&quot;查询帮助文档&quot;&gt;&lt;a href=&quot;#查询帮助文档&quot; class=&quot;headerlink&quot; title=&quot;查询帮助文档&quot;&gt;&lt;/a&gt;查询帮助文档&lt;/h5&gt;&lt;p&gt;&lt;code&gt;man&lt;/code&gt;： 用于查看命令的帮助文档 例：&lt;code&gt;man ls&lt;/code&gt;&lt;br&gt;&lt;code&gt;ls [-a/l/d]&lt;/code&gt;：列出当前目录下的目录和文件，不包含隐藏文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;-a&lt;/code&gt;：列出当目录下的所有文件和目录，包含隐藏文件&lt;br&gt;&lt;code&gt;-l&lt;/code&gt;：列出当前目录下出隐藏文件外的所有文件和目录，包含 权限、所属主、所属组及文件创建时间&lt;br&gt;&lt;code&gt;-d&lt;/code&gt;：&lt;br&gt;&lt;code&gt;ls [文件名]&lt;/code&gt;：会列出指定目录下的文件和目录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;linux下重要的系统目录&quot;&gt;&lt;a href=&quot;#linux下重要的系统目录&quot; class=&quot;headerlink&quot; title=&quot;linux下重要的系统目录&quot;&gt;&lt;/a&gt;linux下重要的系统目录&lt;/h5&gt;&lt;p&gt;&lt;code&gt;/etc&lt;/code&gt;：存放系统的配置文件，如果更改了该目录下得某个文件，可能导致系统无法正常启动&lt;br&gt;&lt;code&gt;/bin和/usr/bin&lt;/code&gt;：存放供除root外的普通用户使用的指令&lt;br&gt;&lt;code&gt;/sbin和/usr/sbin&lt;/code&gt;：是供root用户使用的指令&lt;br&gt;&lt;code&gt;/var&lt;/code&gt;：也是一个重要的目录，系统上运行各个程序所产生的日志都记录在该目录下(/var/log) 。mail指令的预设也放置在这里&lt;/p&gt;
&lt;h4 id=&quot;linux下文件目录管理&quot;&gt;&lt;a href=&quot;#linux下文件目录管理&quot; class=&quot;headerlink&quot; title=&quot;linux下文件目录管理&quot;&gt;&lt;/a&gt;linux下文件目录管理&lt;/h4&gt;&lt;p&gt;&lt;code&gt;mkdir [-mp][目录名称]&lt;/code&gt;：创建目录&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;-m&lt;/code&gt;：指定创建目录的权限（不常用）&lt;br&gt;&lt;code&gt;-p&lt;/code&gt;：级联创建目录，并且当创建一个已经存在的目录时，不会报错&lt;br&gt;示例：&lt;code&gt;mkdir -p /temp/test&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;rmdir [目录名]&lt;/code&gt;：删除目录，不可以删除文件和空目录（不常用）&lt;br&gt;&lt;code&gt;rm [文件/目录]&lt;/code&gt;：删除文件或目录&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;-r&lt;/code&gt;：删除目录的选项，类似rmdir，但可以删除空目录。rm -r可以删除非空目录&lt;br&gt;&lt;code&gt;-i&lt;/code&gt;会询问是否删除，y确定。&lt;br&gt;&lt;code&gt;-f&lt;/code&gt;：表示强制删除，不再询问是否删除。如果后面跟一个不存在的目录或文件，则不会报错,但是这个命令只能删除文件&lt;br&gt;&lt;code&gt;-rf&lt;/code&gt;：删除文件或目录，rm -rf 后面不能加”/“,否则会把你的系统文件全部删掉，&lt;strong&gt;非常危险.慎用慎用&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;which&lt;/code&gt;：查询命令的绝对路径（不常用）&lt;br&gt;&lt;code&gt;echo $PATH&lt;/code&gt;：查看环境变量&lt;br&gt;&lt;code&gt;cp [-r/i/][来源文件][目的文件]&lt;/code&gt;：复制文件/目录&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;-r&lt;/code&gt;：如果要复制一个目录，必须加-r选项，否则不能复制，类似rm 命令&lt;br&gt;&lt;code&gt;-i&lt;/code&gt;：这是一个安全选项，如果遇到一个已存在的文件，会询问是否覆盖&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;mv [选项][源文件或目录][目标文件或目录]&lt;/code&gt;：移动文件/目录&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;当目标为目录，且目录存在：会把源文件或目录移动到该目录中&lt;/li&gt;
&lt;li&gt;当目标为目录，且目录不存在：则会把源目录重命名为新的目标文件名&lt;/li&gt;
&lt;li&gt;当目标为文件，且文件存在：则会询问是否覆盖&lt;/li&gt;
&lt;li&gt;当目标为文件，且文件不存在： 则会把源文件重命名为新的目标文件名&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;文档相关的命令&quot;&gt;&lt;a href=&quot;#文档相关的命令&quot; class=&quot;headerlink&quot; title=&quot;文档相关的命令&quot;&gt;&lt;/a&gt;文档相关的命令&lt;/h4&gt;&lt;p&gt;&lt;code&gt;cat [选项][文件名]&lt;/code&gt;：正序查看文件内容&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;-n&lt;/code&gt;：查看文件时，把行号也显示在屏幕上&lt;br&gt;&lt;code&gt;-A&lt;/code&gt;：显示所有内容，包括特殊字符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;tac [文件名]&lt;/code&gt;：倒序查看文件内容&lt;br&gt;&lt;code&gt;more [文件名]&lt;/code&gt;：查看文件内容&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当文件内容太多，一屏不能全部显示时，可以用&lt;code&gt;more&lt;/code&gt;命令，&lt;br&gt;当看完一屏之后，按空格键翻页，&lt;code&gt;Ctrl+D&lt;/code&gt;向上翻页，&lt;code&gt;Ctrl+F&lt;/code&gt;向下翻页&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;less [文件名]&lt;/code&gt;：作用和&lt;code&gt;more&lt;/code&gt;一样。空格键翻页，&lt;code&gt;j&lt;/code&gt;键向下移动，&lt;code&gt;k&lt;/code&gt;键向上移动。&lt;code&gt;/[字符串]&lt;/code&gt;可以查找，按&lt;code&gt;n&lt;/code&gt;显示下一个。&lt;br&gt;也可以用&lt;code&gt;?[字符串]&lt;/code&gt;查找，唯一不同的是：&lt;code&gt;/[字符串]&lt;/code&gt;是当前向下搜索，&lt;code&gt;?[字符串]&lt;/code&gt;是向上搜索&lt;/p&gt;
&lt;p&gt;&lt;code&gt;head [-n][数字][文件名]&lt;/code&gt;：直接跟文件名，默认显示文件前10行。也可以去掉&lt;code&gt;-n&lt;/code&gt;  直接加数字。&lt;br&gt;示例：&lt;code&gt;head -n 200 test.txt&lt;/code&gt;&lt;br&gt;      &lt;code&gt;head -200 test.txt&lt;/code&gt;&lt;br&gt;&lt;code&gt;tail [-n][数字][文件名]&lt;/code&gt;：和&lt;code&gt;head&lt;/code&gt;命令类似，默认显示文件最后十行，如果加上&lt;code&gt;-n&lt;/code&gt;选项，则会显示最后几行&lt;br&gt;&lt;code&gt;tail -f [文件名]&lt;/code&gt;：动态显示文件最后十行，可以滚动&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux命令学习（centos6）</title>
    <link href="http://yoursite.com/2017/08/16/linux%E5%AD%A6%E4%B9%A0%EF%BC%88centos6%EF%BC%89/"/>
    <id>http://yoursite.com/2017/08/16/linux学习（centos6）/</id>
    <published>2017-08-16T08:00:00.000Z</published>
    <updated>2017-08-16T10:57:27.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p><code>man</code> ：查看命令的帮助文档<br><code>sudo -s</code>：切换root用户﻿​<br>正确的关机流程为：<code>sync –&gt; shutdown –&gt; reboot –&gt; halt</code><br><code>pwd</code>： 打印出当前所在目录<br><code>mkdir [ 目录名称 ]</code>：  创建目录<br><code>mkdir -p [ 目录名称 ]</code> ：创建级联目录，已存在的目录也不会报错<br><code>touch [ 文件名称 ]</code>： 创建文件<br><code>rm</code>： 删除目录或文件<br><code>rm -r</code>： 询问是否删除<br><code>rm -f</code>： 强制删除<br><code>rm -rf</code>： 删除目录下的所有文件  <strong>慎用慎用</strong><br><code>which</code>： 查找某个命令的绝对路径<br><code>echo $PATH</code>： 打印出环境变量<br><code>PATH=$PATH:/root</code>： 增加’:/root’到环境变量中<br><code>cp [ 来源文件 ] [目的文件]</code>：   拷贝文件<br><code>cp  -r [ 来源文件 ] [目的文件]</code>： 拷贝文件夹<br><code>cp  - i [ 来源文件 ] [目的文件]</code>： 拷贝文件;<br>安全选项：和 ‘rm’类似，如果遇到一个存在的文件，会问是否覆盖<br><code>echo &#39;my name is wang&#39; &gt; test2.txt</code>： 往test2写入内容<br> <code>mv [选项] [源文件][目标文件]</code>：移动文件<br><code>mv -i</code> : 和cp的-i 一样，当目标文件存在时会问用户是否要覆盖<br><code>cat</code>：查看文件内容<br><code>tac</code>：倒叙查看文件内容<br><code>more</code> ：也是用来查看一个文件的内容，后面直接跟文件名，当文件内容太多，一屏幕不能占下，而您用 <code>cat</code> 肯定是看不前面的内容的，那么使用 <code>more</code> 就可以解决这个问题了。<br>当看完一屏后按空格键继续看下一屏。但看完所有内容后就会退出。如果您想提前退出，只需按 <code>q</code> 键即可。<br><code>less</code> ：作用跟<code>more</code>一样，可以支持上下移动，”j”键向下移动，”k”键向上移动，空格翻页。<br>按下”/“键，然后输入一个关键字 可以查找，按”n”键显示下一个。”?”键同样支持搜索，”/“向下查找，”?”是向上查找<br><code>head [文件名]</code>：显示文件的前十行，如果加 <code>-n</code> 选项则显示文件前n行<br> <code>tail [文件名]</code>：显示文件最后十行，如果加 -n选项则显示文件后n行<br><code>tail -f [文件名]</code>：动态显示文件最后十行，可以滚动</p>
<p><code>groupadd [组名]</code>：添加一个用户组<br><code>chgrp [组名][文件名或文件夹]</code>：更改文件或文件夹所属组，只能更改目录或文件本身<br><code>chgrp -R [组名][文件夹名]</code>：级联更改文件夹所属组（区分大小写）<br>这里的<code>-R</code>选项只作用于目录，作用是级联更改，即不仅更改当前目录，连目录里的目录或者文件全部更改<br><code>chown [-R][账户名][文件名或文件夹]</code> ： 更改文件所属主<br><code>chown [-R][账户名]：[组名][文件名或文件夹]</code>：更改文件所属组</p>
<blockquote>
<p><code>r</code> 代表可读<br><code>w</code> 代表可写<br><code>x</code> 代表可执行</p>
</blockquote>
<a id="more"></a>
<p><code>chmod [xyz][文件名]</code>：（这里的xyz表示数字）赋值权限<br> 默认一个目录的权限为 755，而一个文件的默认权限为644<br><code>chmod -R [xyz][文件名]</code>：级联更改</p>
<blockquote>
<p>赋值权限的顺序为 1.user 2.group3.others,<br>我们可以用u,g,o来代表他们的属性. a 则代表 all 亦即全部<br>用法示例：<code>chomd u=rwx,og=r javaMain.java</code><br>减少权限：<code>chomd u-x javaMain.java</code>  去掉取消user的执行权限</p>
</blockquote>
<p><code>find [路径][参数]</code> ：查询文件</p>
<blockquote>
<p><code>-atime +n/-n</code> ： 访问或执行时间大于/小于n天的文件<br><code>-ctime +n/-n</code> ：写入、更改inode属性（例如更改所有者、权限或者链接）时间大于/小于n天的文件<br><code>-mtime +n/-n</code> ： 写入时间大于/小于n天的文件<br>示例：<code>find wang/ -atime -3</code></p>
</blockquote>
<p> <code>find [文件夹]-name [文件名]</code> ：按name查询<br>文件名可为空，为空时在当前目录下搜索<br><code>find [文件夹]-type [文件类型]</code>  ：按type查询</p>
<blockquote>
<p>文件类型 包含了 <code>f, b, c, d, l, s</code> 等<br> 示例： <code>find selfloan/ -type f</code><br><code>d</code> 表示该文件为目录；<br><code>f</code>或者<code>-</code> 表示该文件为普通文件；<br><code>l</code> 表示该文件为链接文件（linux file），上边提到的软链接即为该类型；<br><code>b</code> 表示该文件为块设备，比如 /dev/sda 就是这样的文件。<br><code>c</code> 表示该文件为串行端口设备，例如键盘、鼠标。<br><code>s</code> 表示该文件为套接字文件（socket），用于进程间通信。</p>
</blockquote>
<p> <code>|</code>：管道符，把前面命令的输出再输入给后面的命令</p>
<p><code>groupadd [-g Gid] [组名]</code> ：创建组<br>不加 “-g” 选项则按照系统默认的gid创建组，跟用户一样，gid也是从500开始的<br><code>groupdel [组名]</code>：删除组（删除有账户的组，必须先删除组内的账户）<br><code>useradd [-u UID] [-g GID] [-d HOME] [-M] [-s]</code> ：新增用户<br>‘useradd’ 不加任何选项直接跟用户名，则会创建一个跟用户名同样名字的组。</p>
<blockquote>
<p><code>-u</code> 自定义UID<br><code>-g</code> 使其属于已经存在的某个组，后面可以跟组id, 也可以跟组名<br><code>-d</code> 自定义用户的家目录<br><code>-M</code> 不建立家目录<br><code>-s</code> 自定义shell</p>
</blockquote>
<p><code>userdel [-r] [用户名]</code>： 删除账户</p>
<blockquote>
<p><code>-r</code> 删除账户时连带账户的家目录一起删除</p>
</blockquote>
<p><code>passwd [用户名]</code>： 创建/修改一个用户的密码<br>passwd后面不加用户名则是修改当前用户的密码<br>只有root用户，才可以更改其他账户的密码，普通账户只能更改自己的密码</p>
<p>磁盘管理<br><code>df [ -i h k m ]</code>： 查看已挂载磁盘的总容量、使用容量、剩余容量。默认单位为K</p>
<blockquote>
<p><code>-i</code> 查看inodes使用状况<br><code>-h</code> 系统自动调节， 示例 df -h<br><code>-k</code> 和<code>-m</code> 分别以K，M为单位显示</p>
</blockquote>
<p>图示<br><img src="http://oursdj9xa.bkt.clouddn.com/1499941101242_2.png" alt=""></p>
<blockquote>
<p><code>Filesystem</code>列 是分区的名字<br><code>Size</code> 为该分区总共的容量<br><code>Used</code> 为已经使用了多少<br><code>Avail</code> 为还剩下多少<br><code>Use%</code> 为已经使用百分比<br><code>Mounted on</code> 为挂载点。<br><code>/dev/shm</code> 为内存挂载点，如果您想把文件放到内存里，就可以放到<code>/dev/shm/</code>目录下</p>
</blockquote>
<p><code>du [-a b c k m s h] [文件或目录名]</code>： 查看某个目录或文件所占空间大小</p>
<blockquote>
<p><code>-a</code> 全部文件与目录大小都列出来。如果不加任何选项和参数只列出目录（包含子目录）大小<br><code>-b</code> 列出的值以bytes为单位输出<br><code>-k</code> 以KB为单位输出(默认)<br><code>-m</code> 以MB为单位输出<br><code>-h</code> 系统自动调节单位，例如文件太小可能就几K，那么就以K为单位显示，如果大到几G，则就以G为单位显示<br><code>-c</code> 最后加总<br><code>-s</code> 只列出总和<br><code>-c</code> 最后加总<br><code>-s</code> 只列出总和</p>
</blockquote>
<p><code>fdisk [-l][设备名称]</code>： 列出系统中的磁盘设备以及分区表</p>
<blockquote>
<p><code>-l</code> 后边不跟设备名会直接列出系统中所有的磁盘设备以及分区表，加上设备名会列出该设备的分区表。</p>
</blockquote>
<p><code>mount</code> ：查看当前系统已经挂载的所有分区 ,以及分区文件系统的类型，挂载点和一些选项等信息</p>
<p><code>scp [目标文件路径][服务器username]@[服务器地址]：[上传后存放路径]</code>：上传文件</p>
<blockquote>
<p>示例：scp /Users/wang/wa/target/wang.jar root@192.168.0.211:.</p>
</blockquote>
<p><code>scp [服务器username]@[服务器地址]:[目标文件路径] 空格[下载后存放路径][新文件名]</code>：下载文件</p>
<blockquote>
<p>下载后存放路径 可省咯，默认为当前目录<br>示例: scp wang@121.41.11.112:/root/fix.log  fix.txt </p>
</blockquote>
<h4 id="vim的快捷键"><a href="#vim的快捷键" class="headerlink" title="vim的快捷键"></a>vim的快捷键</h4><p><strong> 一般模式下移动光标</strong><br><code>&gt;h / 左方向键</code> ：光标向左移动一个字符<br><code>j / 下方向键</code> ：光标向下移动一个字符<br><code>k / 上方向键</code> ：光标向上移动一个字符<br><code>l / 右方向键</code> ：光标向右移动一个字符<br><code>ctrl+f /pageUp</code> ：屏幕向前移动一页<br><code>ctrl+b /pageDown</code>：屏幕向后移动一页<br><code>数字0 /shift+6</code> ：移动到本行 行首<br><code>shift+4</code> ：移动到本行 行尾<br><code>G</code> ：光标移动到文本最末行<br><code>nG</code> ：（n是数字）移动到该文本的第n行<br><code>gg</code> ： 移动到该文本的首行</p>
<p><strong> 一般模式下查找与替换</strong></p>
<blockquote>
<p><code>/word</code> ：向光标之后寻找一个字符串为 <code>word</code>的字符串，当找到一个word之后，按 n键继续查找<br><code>?word</code> ：使用方法同上<br><code>:n1,n2s/word1/word2/g</code>：在n1和n2行间查找word1字符，并替换为word2.可以用#代替/<br>    示例： <code>:210,245s/echo/echo2/g</code><br><code>:1,$s/word1/word2/g</code> ：从第一行到最末行</p>
</blockquote>
<p><strong>一般模式下删除、复制粘贴</strong></p>
<blockquote>
<p><code>x,X</code> ：x为向后删除一个字符，X为向前删除一个字符<br><code>dd</code>：删除光标所在的那行<br><code>ndd</code>：n为数字，删除光标所在的向下n行<br><code>yy</code>：复制光标所在行的数据<br><code>nyy</code>：复制从光标所在行起向下n行<br><code>p或P</code>: p复制的数据从光标下一行粘贴，P从光标上一行粘贴</p>
</blockquote>
<p><strong> 进入编辑模式</strong><br><code>i</code>：在当前字符前插入字符<br><code>I</code>：在当前行行首插入字符<br><code>a</code>：在当前字符后插入字符<br><code>A</code>：在当前行行末插入字符<br><code>o</code>：……..行下插入新的一行<br><code>O</code>：……….上……….<br><code>uu</code> ：还原上一次操作</p>
<p><strong> 命令模式</strong></p>
<blockquote>
<p><code>:w</code>  ：将编译过的文本保存<br><code>:w!</code> ：若文本属性为只读时，强制保存<br><code>:q</code>  ：退出vim<br><code>:q!</code> ：不管编辑或未编辑都不保存退出<br><code>:wq</code> ：保存，退出<br><code>:set nu</code> ：显示行号<br><code>:set nonu</code> ：取消行号</p>
</blockquote>
<h4 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h4><blockquote>
<p><code>.gz</code> gzip压缩工具压缩的文件<br><code>.bz2</code> bzip2压缩工具压缩的文件<br><code>.tar</code> tar打包程序打包的文件(tar并没有压缩功能，只是把一个目录合并成一个文件)<br><code>.tar.gz</code> 可以理解为先用tar打包，然后再gzip压缩<br><code>.tar.bz2</code> 同上，先用tar打包，然后再bzip2压缩</p>
</blockquote>
<p><code>gzip [-d#] [文件名]</code> ：压缩文件(此命令不可以压缩文件夹)</p>
<blockquote>
<p><code>-d</code> ：解压时使用<br><code>-#</code>：压缩等级，1压缩最差，9压缩最好，默认为6.很少使用<br>示例：<code>gzip test.txt</code><br>解压：<code>gzip -d test.txt.gz</code></p>
</blockquote>
<p><code>bzip2 [-dz][文件名]</code> ：压缩/解压 文件(不支持压缩文件夹)</p>
<blockquote>
<p><code>-d</code>：解压<br><code>-z</code>：压缩(可省略，默认为压缩)<br>示例：<code>bzip2 newFile.txt</code><br>解压：<code>bzip2 -d newFile.txt.bz2</code></p>
</blockquote>
<p><code>tar [-zjxcvfpP] [文件或文件夹名称]</code> ：压缩、解压</p>
<blockquote>
<p>﻿<code>-z</code>﻿: 同时用gzip压缩<br><code>-j</code>:  同时用bzip2压缩<br><code>-x</code>: 解包或解压<br><code>-t</code>: 查看tar包里的文件(需配合f一起使用)<br>示例：<code>tar -tf test.tar</code><br><code>-c</code>: 建立一个tar包或压缩包文件<br><code>-v</code>: 可视化<br><code>-f</code>: 后面加文件名。压缩时 后面文件名为压缩后的名称；<br>解压时 后面文件名为需解压文件名。有多个参数组合时，将 f 写在最后<br><code>-p</code>: 使用原文件属性(不常用)<br><code>-P</code>：使用绝对路径(不常用)<br>示例：<code>tar -cvf tarTest20.tar newFile.txt tempData tarTest2.tar</code><br>ps: <code>tarTest20.tar</code> 为压缩后新文件名称；<br>需压缩的文件为 <code>newFile.txt tempData</code> 和<code>tarTest2.tar</code><br>解压：<code>tar -xvf tarTest20.tar</code></p>
</blockquote>
<p><strong>打包时使用gzip压缩</strong></p>
<blockquote>
<p>示例： <code>tar -czvf tarTest29.tar.gz newFile.txt tarTestDir/</code><br>ps：将<code>newFile.txt、 tarTestDir</code> 打包并压缩为 <code>tarTest29.gz</code><br>解压：<code>tar -zxvf tarTest29.tar.gz</code><br><code>tar -tf tarTest29.tar.gz</code>： 可以查看包内文件</p>
</blockquote>
<p><strong>exclude选项</strong><br><code>tar -cvf [新文件名] --exclude [需排除的文件或文件名]  [需压缩的文件夹]</code><br>示例：<code>tar -cvf dir42.tar --exclude tarTest.txt tarTestDir</code> </p>
<h4 id="shell-脚本"><a href="#shell-脚本" class="headerlink" title="shell 脚本"></a>shell 脚本</h4><p><code>!!</code>： 两个连续！表示执行上一条指令<br><code>!n</code>： 这里的n是数字，表示执行命令历史中的第n条指令<br><code>!字符串</code> ，例如!ls 表示执行命令历史中最新一次 以’ls’开头的指令<br><code>tab</code> 指令或文件夹补全，连续按两次tab 键，系统则会把所有的指令或文件夹都列出来<br><code>别名</code>：通过别名把很长并且常用的指令设置为一个简洁的指令，<br><code>alias [命令别名]=[&#39;具体的命令&#39;]</code>：设置别名  例：<code>alias wang = &#39;ls -l&#39;</code><br>取消别名：<code>unalias [命令别名]</code></p>
<p> 在bash下，可以使用 <code>*</code> 来匹配零个或多个字符，而用 <code>?</code> 匹配一个字符<br>管道符 <code>|</code>, 就是把前面的命令运行的结果丢给后面的命令<br> 作业控制：<br>当运行一个进程时，您可以使它暂停（<code>Ctrl+z</code>），然后使用 <code>fg</code> 命令恢复它，利用 <code>bg</code> 命令使他到后台运行，<br>您也可以使它终止（<code>Ctrl+c</code>）</p>
<p><code>kill [pid]</code>： 杀掉进程<br>kill命令语法很简单，直接在后面加pid即可，<br>如果遇到杀不死的进程时，可以在kill 后面加一个选项： <code>kill -9 [pid]</code></p>
<h4 id="不常用"><a href="#不常用" class="headerlink" title="不常用"></a>不常用</h4><p> <code>umask</code>：上边两条规则中的默认值（文件为666，目录为777）需要减掉的权限。默认为0022<br> <code>chattr [+-=][ASaci [文件或者目录名]</code>： 追加或删除特殊属性</p>
<blockquote>
<p><code>+-=</code> : 分别为增加、减少、设定<br><code>A</code> : 增加该属性后，文件或目录的atime将不可被修改；<br><code>S</code> : 增加该属性后，会将数据同步写入磁盘中；<br><code>a</code> : 增加该属性后，只能追加不能删除，非root用户不能设定该属性；<br><code>c</code> : 自动压缩该文件，读取时会自动解压；<br><code>i</code> : 增加后，使文件不能被删除、重命名、设定链接接、写入、新增数据；</p>
</blockquote>
<p> <code>lsattr[-aR] [文件/目录名]</code>：用来读取文件或者目录的特殊权限</p>
<blockquote>
<p><code>-a</code> : 类似与ls 的-a 选项，即连同隐藏文件一同列出；<br><code>-R</code> : 连同子目录的数据一同列出</p>
</blockquote>
<p> 《跟阿铭学Linux（第二版）》李世明 读书笔记<br>因近期买了第三版，此篇将不再更新，后续将有一篇基于Linux7的笔记。</p>
<p>本文的示例 都是我测试过的，发布的时候转markdown版本，不免会有些问题。有理解错误或者不完善的地方 欢迎可以发邮件给我，谢谢<br>wangli_it@163.com</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h4 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h4&gt;&lt;p&gt;&lt;code&gt;man&lt;/code&gt; ：查看命令的帮助文档&lt;br&gt;&lt;code&gt;sudo -s&lt;/code&gt;：切换root用户﻿​&lt;br&gt;正确的关机流程为：&lt;code&gt;sync –&amp;gt; shutdown –&amp;gt; reboot –&amp;gt; halt&lt;/code&gt;&lt;br&gt;&lt;code&gt;pwd&lt;/code&gt;： 打印出当前所在目录&lt;br&gt;&lt;code&gt;mkdir [ 目录名称 ]&lt;/code&gt;：  创建目录&lt;br&gt;&lt;code&gt;mkdir -p [ 目录名称 ]&lt;/code&gt; ：创建级联目录，已存在的目录也不会报错&lt;br&gt;&lt;code&gt;touch [ 文件名称 ]&lt;/code&gt;： 创建文件&lt;br&gt;&lt;code&gt;rm&lt;/code&gt;： 删除目录或文件&lt;br&gt;&lt;code&gt;rm -r&lt;/code&gt;： 询问是否删除&lt;br&gt;&lt;code&gt;rm -f&lt;/code&gt;： 强制删除&lt;br&gt;&lt;code&gt;rm -rf&lt;/code&gt;： 删除目录下的所有文件  &lt;strong&gt;慎用慎用&lt;/strong&gt;&lt;br&gt;&lt;code&gt;which&lt;/code&gt;： 查找某个命令的绝对路径&lt;br&gt;&lt;code&gt;echo $PATH&lt;/code&gt;： 打印出环境变量&lt;br&gt;&lt;code&gt;PATH=$PATH:/root&lt;/code&gt;： 增加’:/root’到环境变量中&lt;br&gt;&lt;code&gt;cp [ 来源文件 ] [目的文件]&lt;/code&gt;：   拷贝文件&lt;br&gt;&lt;code&gt;cp  -r [ 来源文件 ] [目的文件]&lt;/code&gt;： 拷贝文件夹&lt;br&gt;&lt;code&gt;cp  - i [ 来源文件 ] [目的文件]&lt;/code&gt;： 拷贝文件;&lt;br&gt;安全选项：和 ‘rm’类似，如果遇到一个存在的文件，会问是否覆盖&lt;br&gt;&lt;code&gt;echo &amp;#39;my name is wang&amp;#39; &amp;gt; test2.txt&lt;/code&gt;： 往test2写入内容&lt;br&gt; &lt;code&gt;mv [选项] [源文件][目标文件]&lt;/code&gt;：移动文件&lt;br&gt;&lt;code&gt;mv -i&lt;/code&gt; : 和cp的-i 一样，当目标文件存在时会问用户是否要覆盖&lt;br&gt;&lt;code&gt;cat&lt;/code&gt;：查看文件内容&lt;br&gt;&lt;code&gt;tac&lt;/code&gt;：倒叙查看文件内容&lt;br&gt;&lt;code&gt;more&lt;/code&gt; ：也是用来查看一个文件的内容，后面直接跟文件名，当文件内容太多，一屏幕不能占下，而您用 &lt;code&gt;cat&lt;/code&gt; 肯定是看不前面的内容的，那么使用 &lt;code&gt;more&lt;/code&gt; 就可以解决这个问题了。&lt;br&gt;当看完一屏后按空格键继续看下一屏。但看完所有内容后就会退出。如果您想提前退出，只需按 &lt;code&gt;q&lt;/code&gt; 键即可。&lt;br&gt;&lt;code&gt;less&lt;/code&gt; ：作用跟&lt;code&gt;more&lt;/code&gt;一样，可以支持上下移动，”j”键向下移动，”k”键向上移动，空格翻页。&lt;br&gt;按下”/“键，然后输入一个关键字 可以查找，按”n”键显示下一个。”?”键同样支持搜索，”/“向下查找，”?”是向上查找&lt;br&gt;&lt;code&gt;head [文件名]&lt;/code&gt;：显示文件的前十行，如果加 &lt;code&gt;-n&lt;/code&gt; 选项则显示文件前n行&lt;br&gt; &lt;code&gt;tail [文件名]&lt;/code&gt;：显示文件最后十行，如果加 -n选项则显示文件后n行&lt;br&gt;&lt;code&gt;tail -f [文件名]&lt;/code&gt;：动态显示文件最后十行，可以滚动&lt;/p&gt;
&lt;p&gt;&lt;code&gt;groupadd [组名]&lt;/code&gt;：添加一个用户组&lt;br&gt;&lt;code&gt;chgrp [组名][文件名或文件夹]&lt;/code&gt;：更改文件或文件夹所属组，只能更改目录或文件本身&lt;br&gt;&lt;code&gt;chgrp -R [组名][文件夹名]&lt;/code&gt;：级联更改文件夹所属组（区分大小写）&lt;br&gt;这里的&lt;code&gt;-R&lt;/code&gt;选项只作用于目录，作用是级联更改，即不仅更改当前目录，连目录里的目录或者文件全部更改&lt;br&gt;&lt;code&gt;chown [-R][账户名][文件名或文件夹]&lt;/code&gt; ： 更改文件所属主&lt;br&gt;&lt;code&gt;chown [-R][账户名]：[组名][文件名或文件夹]&lt;/code&gt;：更改文件所属组&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;r&lt;/code&gt; 代表可读&lt;br&gt;&lt;code&gt;w&lt;/code&gt; 代表可写&lt;br&gt;&lt;code&gt;x&lt;/code&gt; 代表可执行&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="linux,centos6" scheme="http://yoursite.com/tags/linux-centos6/"/>
    
  </entry>
  
  <entry>
    <title>java虚拟机运行时内存分区</title>
    <link href="http://yoursite.com/2017/08/16/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <id>http://yoursite.com/2017/08/16/java虚拟机/</id>
    <published>2017-08-16T06:00:00.000Z</published>
    <updated>2017-08-16T10:46:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>Java虚拟机在执行java程序的过程中会把它所管理的内存划分为若干个不同的数据区域，<br>主要包括：<strong>方法区、虚拟机栈、本地方法栈、堆、程序计数器</strong>。其中，java堆和方法区是<strong>线程共享的数据区</strong>，其他几个都属于<strong>线程私有的</strong>。</p>
<h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器:"></a>程序计数器:</h4><p>程序计数器是一块较小的内存空间，它的作用可以看做是<strong>当前线程所执行的字节码的行号指示器</strong> ，字节码解释器的工作就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，<strong>分支、循环、跳转、异常处理、线程恢复</strong>等基础功能都需要依赖这个计数器来完成。</p>
<p>如果线程正在执行的是java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器的值为空（undefined）<br>此内存区域是<strong>唯一一个</strong>在Java虚拟机规范中没有规定任何情况的<code>OutofMemoryError</code>区域</p>
<h4 id="Java虚拟机栈："><a href="#Java虚拟机栈：" class="headerlink" title="Java虚拟机栈："></a>Java虚拟机栈：</h4><p>虚拟机栈描述的是Java方法执行的内存模型，每个方法被执行的时候都会创建一个线帧，用于存储 <code>局部变量表、操作栈、动态链接、方法出口</code>等信息。每一个方法 被调用至执行完成的过程，就对应着一个线帧在虚拟机栈中从入栈到出栈的过程。</p>
<p>我们通常把Java内存区分为<code>堆内存和栈内存</code>。</p>
<blockquote>
<p>栈内存指的就是现在所讲的虚拟机栈，或者说是   虚拟机栈中局部  变量表部分.<br> 局部变量表所需的内存空间在编译期间完成分配。<br> 在方法运行期间不会改变局部变量表的大小<br> 在java虚拟机栈中，规定了两个异常，<code>StackOverflowError</code>和  <code>OutOfMemoryError</code>异常</p>
</blockquote>
<a id="more"></a>
<h4 id="本地方法栈："><a href="#本地方法栈：" class="headerlink" title="本地方法栈："></a>本地方法栈：</h4><p>本地方法栈和虚拟机栈所发挥的作用非常相似，<strong>区别在于虚拟机栈为虚拟机执行java方法，而本地方法栈则为虚拟机执行native方法</strong>。<br>有些虚拟机（如HotSpot）直接把本地方法栈和虚拟机栈合二为一</p>
<h4 id="java堆："><a href="#java堆：" class="headerlink" title="java堆："></a>java堆：</h4><blockquote>
<p>java堆是java虚拟机所管理的内存中<strong>最大的</strong>一块。<br>java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。在此内存区域的唯一目的就是存放对象实例，<strong>几乎所有的对象实例</strong>都在这里分配内存。<br>java堆是<strong>垃圾回收器管理的主要区域</strong>，因此很多时候被称为”GC堆”</p>
</blockquote>
<p>Java堆可以处于物理上不连续的内存空间，只要逻辑上连续的即可。在实现上，既可以实现固定大小的，也可以是扩展的。<br>由于现在收集器基本上都是采用分代收集算法，所以java堆中可以细分为：<code>新生代</code>和<code>老年代</code>。<br>在细致一点可以分为：Eden空间、 From Survivor空间、To Survivor空间等。<br>如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出<code>OutOfMemoryError</code>异常</p>
<h4 id="方法区："><a href="#方法区：" class="headerlink" title="方法区："></a>方法区：</h4><p>方法区与java堆类似，是各个线程共享的内存区域，它用于存储已<strong>被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码</strong>等数据<br>当方法区无法满足内存分配需求时，将会抛出<code>OutOfMemoryError</code>异常</p>
<h4 id="运行时常量池："><a href="#运行时常量池：" class="headerlink" title="运行时常量池："></a>运行时常量池：</h4><p>运行时常量是方法区的一部分。用于存放<strong>编译期生成的各种字面量和符号的引用</strong>，这部分内容将在类加载后 进入方法区的运行时常量池中存放。<br>除了保存class文件中描述的符号引用外，还会把<strong>翻译出来的直接引用</strong>也存储在运行时常量池。<br>运行常量池相对于class文件常量池的另一个重要特性是<strong>具备动态性</strong>.<br>java语言并不是要求常量一定在编译期产生，也就是说并非预置入class文件的常量池的内容才能进入运行常量池，运行期间也可以将新的常量放入池中。例如<code>String的intern()</code>方法<br>这部分会抛出<code>OutOfMemoryError</code>异常</p>
<h4 id="个人见解："><a href="#个人见解：" class="headerlink" title="个人见解："></a>个人见解：</h4><p><strong>程序计数器</strong>：存放当前线程所执行字节码的行号<br><strong>本地方法栈</strong>：作用与虚拟机栈类似，区别在于执行的为native方法<br><strong>java堆</strong>：存放对象实例<br><strong>方法区</strong>：存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据<br><strong>运行时候常量池</strong>：存放编译期生成的各种字面量和符号的引用和翻译出来的直接引用<br><strong>java虚拟机栈</strong>：描述Java方法执行的内存模型，存放存储局部变量表、操作栈、动态链接、方法出口等信息<br>局部变量表：存放编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用类型和returnAddress类型</p>
<p>《深入理解java虚拟机（第二版）》周志明 读书笔记<br>近期才开始写博客，有理解错误或者不完善的地方 可以发邮件给我，谢谢<br>wangli_it@163.com</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;Java虚拟机在执行java程序的过程中会把它所管理的内存划分为若干个不同的数据区域，&lt;br&gt;主要包括：&lt;strong&gt;方法区、虚拟机栈、本地方法栈、堆、程序计数器&lt;/strong&gt;。其中，java堆和方法区是&lt;strong&gt;线程共享的数据区&lt;/strong&gt;，其他几个都属于&lt;strong&gt;线程私有的&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;程序计数器&quot;&gt;&lt;a href=&quot;#程序计数器&quot; class=&quot;headerlink&quot; title=&quot;程序计数器:&quot;&gt;&lt;/a&gt;程序计数器:&lt;/h4&gt;&lt;p&gt;程序计数器是一块较小的内存空间，它的作用可以看做是&lt;strong&gt;当前线程所执行的字节码的行号指示器&lt;/strong&gt; ，字节码解释器的工作就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，&lt;strong&gt;分支、循环、跳转、异常处理、线程恢复&lt;/strong&gt;等基础功能都需要依赖这个计数器来完成。&lt;/p&gt;
&lt;p&gt;如果线程正在执行的是java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器的值为空（undefined）&lt;br&gt;此内存区域是&lt;strong&gt;唯一一个&lt;/strong&gt;在Java虚拟机规范中没有规定任何情况的&lt;code&gt;OutofMemoryError&lt;/code&gt;区域&lt;/p&gt;
&lt;h4 id=&quot;Java虚拟机栈：&quot;&gt;&lt;a href=&quot;#Java虚拟机栈：&quot; class=&quot;headerlink&quot; title=&quot;Java虚拟机栈：&quot;&gt;&lt;/a&gt;Java虚拟机栈：&lt;/h4&gt;&lt;p&gt;虚拟机栈描述的是Java方法执行的内存模型，每个方法被执行的时候都会创建一个线帧，用于存储 &lt;code&gt;局部变量表、操作栈、动态链接、方法出口&lt;/code&gt;等信息。每一个方法 被调用至执行完成的过程，就对应着一个线帧在虚拟机栈中从入栈到出栈的过程。&lt;/p&gt;
&lt;p&gt;我们通常把Java内存区分为&lt;code&gt;堆内存和栈内存&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;栈内存指的就是现在所讲的虚拟机栈，或者说是   虚拟机栈中局部  变量表部分.&lt;br&gt; 局部变量表所需的内存空间在编译期间完成分配。&lt;br&gt; 在方法运行期间不会改变局部变量表的大小&lt;br&gt; 在java虚拟机栈中，规定了两个异常，&lt;code&gt;StackOverflowError&lt;/code&gt;和  &lt;code&gt;OutOfMemoryError&lt;/code&gt;异常&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java,虚拟机" scheme="http://yoursite.com/tags/java-%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/08/15/hello-world/"/>
    <id>http://yoursite.com/2017/08/15/hello-world/</id>
    <published>2017-08-15T14:34:10.000Z</published>
    <updated>2017-08-16T04:05:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo generate&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
